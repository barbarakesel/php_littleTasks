<?php
$string = "rhtthr";
function isPalindrome($string)   //—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º
{
        $string = trim($string);
        $string = strtolower($string);
    for ($i = 0; $i < strlen($string); $i++){
        if ($string[$i] != $string[strlen($string) - $i - 1]){
            return "–ù–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º";
        }
    }
     return "–ü–∞–ª–∏–Ω–¥—Ä–æ–º";
}
echo isPalindrome($string) . "\n";

$number = 1;
function isPrime($number) //—è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º
{
    if ($number < 2) {
        return "–ß–∏—Å–ª–æ $number –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º";
    }
    $maxNumber = sqrt($number);
for ($i = 2; $i <= $maxNumber; $i++){
    if ($number % $i == 0){ return "–ß–∏—Å–ª–æ $number –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º";}
}
return "–ß–∏—Å–ª–æ $number —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º";
}
echo isPrime($number);

$arr = [5, 5, 2, 0, 9, 2];
function sortArray($array) // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ sort
{
    $k = 0;
    for ($i = 0; $i < count($array) - 1; $i++) {
        for ($j = $i + 1; $j < count($array); $j++) {
            if ($array[$i] > $array[$j]) {
                $k = $array[$i];
                $array[$i] = $array[$j];
                $array[$j] = $k;
            }
        }
    }

    foreach ($array as $value) {
        echo $value . "\n";
    }
}

sortArray($arr);

function wordFrequency($wordFrequency) //
{

}
function generatePassword($length) //
{

}
/*
 * 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é isPalindrome($string), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É).

2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞
–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é isPrime($number), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ—Å—Ç—ã–º.

3Ô∏è‚É£ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sortArray($arr), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è sort()).

4Ô∏è‚É£ –ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é wordFrequency(wordFrequency), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, –≥–¥–µ –∫–ª—é—á ‚Äî —Å–ª–æ–≤–æ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∫—É.

5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π
–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é generatePassword($length), –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä.

6Ô∏è‚É£ –§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é factorial($n), –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞.

7Ô∏è‚É£ –§–∏–±–æ–Ω–∞—á—á–∏
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é fibonacci($n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é –∏–ª–∏ —Ü–∏–∫–ª).

8Ô∏è‚É£ –ß–µ—Ç–Ω—ã–µ –∏ –Ω–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é splitEvenOdd($arr), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞: –æ–¥–∏–Ω —Å —á–µ—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –¥—Ä—É–≥–æ–π ‚Äî —Å –Ω–µ—á–µ—Ç–Ω—ã–º–∏.

9Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é longestWord($text), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —Å—Ç—Ä–æ–∫–µ.

üîü –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
–°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é calculate($a, $b, $operator), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /) –Ω–∞–¥ –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏.*/